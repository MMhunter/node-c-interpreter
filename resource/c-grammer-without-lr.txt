primary_expression
	IDENTIFIER
	CONSTANT
	STRING_LITERAL
	( <expression> )

postfix_expression
	<primary_expression> <postfix_expression_tail>

argument_expression_list
	<assignment_expression> <argument_expression_list_tail>

unary_expression
	<postfix_expression>
	INC_OP <unary_expression>
	DEC_OP <unary_expression>
	<unary_operator> <cast_expression>
	SIZEOF <unary_expression>
	SIZEOF ( <type_name> )

unary_operator
	&
	*
	+
	-
	~
	!

cast_expression
	<unary_expression>
	( <type_name> ) <cast_expression>

multiplicative_expression
	<cast_expression> <multiplicative_expression_tail>

additive_expression
	<multiplicative_expression> <additive_expression_tail>

shift_expression
	<additive_expression> <shift_expression_tail>

relational_expression
	<shift_expression> <relational_expression_tail>

equality_expression
	<relational_expression> <equality_expression_tail>

and_expression
	<equality_expression> <and_expression_tail>

exclusive_or_expression
	<and_expression> <exclusive_or_expression_tail>

inclusive_or_expression
	<exclusive_or_expression> <inclusive_or_expression_tail>

logical_and_expression
	<inclusive_or_expression> <logical_and_expression_tail>

logical_or_expression
	<logical_and_expression> <logical_or_expression_tail>

conditional_expression
	<logical_or_expression>
	<logical_or_expression> ? <expression> : <conditional_expression>

assignment_expression
	<conditional_expression>
	<unary_expression> <assignment_operator> <assignment_expression>

assignment_operator
	=
	MUL_ASSIGN
	DIV_ASSIGN
	MOD_ASSIGN
	ADD_ASSIGN
	SUB_ASSIGN
	LEFT_ASSIGN
	RIGHT_ASSIGN
	AND_ASSIGN
	XOR_ASSIGN
	OR_ASSIGN

expression
	<assignment_expression> <expression_tail>

constant_expression
	<conditional_expression>

declaration
	<declaration_specifiers> ;
	<declaration_specifiers> <init_declarator_list> ;

declaration_specifiers
	<storage_class_specifier>
	<storage_class_specifier> <declaration_specifiers>
	<type_specifier>
	<type_specifier> <declaration_specifiers>
	<type_qualifier>
	<type_qualifier> <declaration_specifiers>
	<function_specifier>
	<function_specifier> <declaration_specifiers>

init_declarator_list
	<init_declarator> <init_declarator_list_tail>

init_declarator
	<declarator>
	<declarator> = <initializer>

storage_class_specifier
	TYPEDEF
	EXTERN
	STATIC
	AUTO
	REGISTER

type_specifier
	VOID
	CHAR
	SHORT
	INT
	LONG
	FLOAT
	DOUBLE
	SIGNED
	UNSIGNED
	BOOL
	COMPLEX
	IMAGINARY
	<struct_or_union_specifier>
	<enum_specifier>
	TYPE_NAME

struct_or_union_specifier
	<struct_or_union> IDENTIFIER { <struct_declaration_list> }
	<struct_or_union> { <struct_declaration_list> }
	<struct_or_union> IDENTIFIER

struct_or_union
	STRUCT
	UNION

struct_declaration_list
	<struct_declaration> <struct_declaration_list_tail>

struct_declaration
	<specifier_qualifier_list> <struct_declarator_list> ;

specifier_qualifier_list
	<type_specifier> <specifier_qualifier_list>
	<type_specifier>
	<type_qualifier> <specifier_qualifier_list>
	<type_qualifier>

struct_declarator_list
	<struct_declarator> <struct_declarator_list_tail>

struct_declarator
	<declarator>
	: <constant_expression>
	<declarator> : <constant_expression>

enum_specifier
	ENUM { <enumerator_list> }
	ENUM IDENTIFIER { <enumerator_list> }
	ENUM { <enumerator_list> , }
	ENUM IDENTIFIER { <enumerator_list> , }
	ENUM IDENTIFIER

enumerator_list
	<enumerator> <enumerator_list_tail>

enumerator
	IDENTIFIER
	IDENTIFIER = <constant_expression>

type_qualifier
	CONST
	RESTRICT
	VOLATILE

function_specifier
	INLINE

declarator
	<pointer> <direct_declarator>
	<direct_declarator>

direct_declarator
	IDENTIFIER <direct_declarator_tail>

pointer
	*
	* <type_qualifier_list>
	* <pointer>
	* <type_qualifier_list> <pointer>

type_qualifier_list
	<type_qualifier> <type_qualifier_list_tail>

parameter_type_list
	<parameter_list>
	<parameter_list> , ELLIPSIS

parameter_list
	<parameter_declaration> <parameter_list_tail>

parameter_declaration
	<declaration_specifiers> <declarator>
	<declaration_specifiers> <abstract_declarator>
	<declaration_specifiers>

identifier_list
	IDENTIFIER <identifier_list_tail>

type_name
	<specifier_qualifier_list>
	<specifier_qualifier_list> <abstract_declarator>

abstract_declarator
	<pointer>
	<direct_abstract_declarator>
	<pointer> <direct_abstract_declarator>

direct_abstract_declarator
	( <abstract_declarator> ) <direct_abstract_declarator_tail>

initializer
	<assignment_expression>
	{ <initializer_list> }
	{ <initializer_list> , }

initializer_list
	<initializer> <initializer_list_tail>

designation
	<designator_list> =

designator_list
	<designator> <designator_list_tail>

designator
	[ <constant_expression> ]
	. IDENTIFIER

statement
	<labeled_statement>
	<compound_statement>
	<expression_statement>
	<selection_statement>
	<iteration_statement>
	<jump_statement>

labeled_statement
	IDENTIFIER : <statement>
	CASE <constant_expression> : <statement>
	DEFAULT : <statement>

compound_statement
	{ }
	{ <block_item_list> }

block_item_list
	<block_item> <block_item_list_tail>

block_item
	<declaration>
	<statement>

expression_statement
	;
	<expression> ;

selection_statement
	IF ( <expression> ) <statement>
	IF ( <expression> ) <statement> ELSE <statement>
	SWITCH ( <expression> ) <statement>

iteration_statement
	WHILE ( <expression> ) <statement>
	DO <statement> WHILE ( <expression> ) ;
	FOR ( <expression_statement> <expression_statement> ) <statement>
	FOR ( <expression_statement> <expression_statement> <expression> ) <statement>
	FOR ( <declaration> <expression_statement> ) <statement>
	FOR ( <declaration> <expression_statement> <expression> ) <statement>

jump_statement
	GOTO IDENTIFIER ;
	CONTINUE ;
	BREAK ;
	RETURN ;
	RETURN <expression> ;

translation_unit
	<external_declaration> <translation_unit_tail>

external_declaration
	<function_definition>
	<declaration>

function_definition
	<declaration_specifiers> <declarator> <declaration_list> <compound_statement>
	<declaration_specifiers> <declarator> <compound_statement>

declaration_list
	<declaration> <declaration_list_tail>

postfix_expression_tail
	[ <expression> ] <postfix_expression_tail>
	( ) <postfix_expression_tail>
	( <argument_expression_list> ) <postfix_expression_tail>
	. IDENTIFIER <postfix_expression_tail>
	PTR_OP IDENTIFIER <postfix_expression_tail>
	INC_OP <postfix_expression_tail>
	DEC_OP <postfix_expression_tail>

argument_expression_list_tail
	, <assignment_expression> <argument_expression_list_tail>

multiplicative_expression_tail
	* <cast_expression> <multiplicative_expression_tail>
	/ <cast_expression> <multiplicative_expression_tail>
	% <cast_expression> <multiplicative_expression_tail>

additive_expression_tail
	+ <multiplicative_expression> <additive_expression_tail>
	- <multiplicative_expression> <additive_expression_tail>

shift_expression_tail
	LEFT_OP <additive_expression> <shift_expression_tail>
	RIGHT_OP <additive_expression> <shift_expression_tail>

relational_expression_tail
	< <shift_expression> <relational_expression_tail>
	> <shift_expression> <relational_expression_tail>
	LE_OP <shift_expression> <relational_expression_tail>
	GE_OP <shift_expression> <relational_expression_tail>

equality_expression_tail
	EQ_OP <relational_expression> <equality_expression_tail>
	NE_OP <relational_expression> <equality_expression_tail>

and_expression_tail
	& <equality_expression> <and_expression_tail>

exclusive_or_expression_tail
	^ <and_expression> <exclusive_or_expression_tail>

inclusive_or_expression_tail
	| <exclusive_or_expression> <inclusive_or_expression_tail>

logical_and_expression_tail
	AND_OP <inclusive_or_expression> <logical_and_expression_tail>

logical_or_expression_tail
	OR_OP <logical_and_expression> <logical_or_expression_tail>

expression_tail
	, <assignment_expression> <expression_tail>

init_declarator_list_tail
	, <init_declarator> <init_declarator_list_tail>

struct_declaration_list_tail
	<struct_declaration> <struct_declaration_list_tail>

struct_declarator_list_tail
	, <struct_declarator> <struct_declarator_list_tail>

enumerator_list_tail
	, <enumerator> <enumerator_list_tail>

direct_declarator_tail
	[ <type_qualifier_list> <assignment_expression> ] <direct_declarator_tail>
	[ <type_qualifier_list> ] <direct_declarator_tail>
	[ <assignment_expression> ] <direct_declarator_tail>
	[ STATIC <type_qualifier_list> <assignment_expression> ] <direct_declarator_tail>
	[ <type_qualifier_list> STATIC <assignment_expression> ] <direct_declarator_tail>
	[ <type_qualifier_list> * ] <direct_declarator_tail>
	[ * ] <direct_declarator_tail>
	[ ] <direct_declarator_tail>
	( <parameter_type_list> ) <direct_declarator_tail>
	( <identifier_list> ) <direct_declarator_tail>
	( ) <direct_declarator_tail>

type_qualifier_list_tail
	<type_qualifier> <type_qualifier_list_tail>

parameter_list_tail
	, <parameter_declaration> <parameter_list_tail>

identifier_list_tail
	, IDENTIFIER <identifier_list_tail>

direct_abstract_declarator_tail
	[ ] <direct_abstract_declarator_tail>
	[ <assignment_expression> ] <direct_abstract_declarator_tail>
	[ * ] <direct_abstract_declarator_tail>
	( ) <direct_abstract_declarator_tail>
	( <parameter_type_list> ) <direct_abstract_declarator_tail>

initializer_list_tail
	, <initializer> <initializer_list_tail>
	, <designation> <initializer> <initializer_list_tail>

designator_list_tail
	<designator> <designator_list_tail>

block_item_list_tail
	<block_item> <block_item_list_tail>

translation_unit_tail
	<external_declaration> <translation_unit_tail>

declaration_list_tail
	<declaration> <declaration_list_tail>